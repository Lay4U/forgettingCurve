rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // 사용자가 인증된 경우에만 접근 허용
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // 현재 사용자와 문서의 userId가 일치하는지 확인
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // 모든 사용자 정보
    match /users/{userId} {
      // 본인 정보만 읽고 쓸 수 있음
      allow read, update, delete: if isAuthenticated() && isOwner(userId);
      // 회원가입은 인증된 사용자만 가능
      allow create: if isAuthenticated() && isOwner(userId);
      
      // 사용자 하위 컬렉션에 대한 접근 권한
      match /notifications/{notificationId} {
        allow read, write: if isAuthenticated() && isOwner(userId);
      }
      
      match /tokens/{tokenId} {
        allow read, write: if isAuthenticated() && isOwner(userId);
      }
    }
    
    // 과목 정보
    match /subjects/{subjectId} {
      // 본인의 과목만 접근 가능
      allow read, write: if isAuthenticated() && isOwner(resource.data.userId);
      // 새 과목 생성 시 본인 ID로만 생성 가능
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
    }
    
    // 학습 자료
    match /studyMaterials/{materialId} {
      // 본인의 학습 자료만 접근 가능
      allow read, write: if isAuthenticated() && isOwner(resource.data.userId);
      // 새 학습 자료 생성 시 본인 ID로만 생성 가능
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
    }
    
    // 복습 템플릿
    match /reviewTemplates/{templateId} {
      // 본인의 템플릿만 접근 가능
      allow read, write: if isAuthenticated() && isOwner(resource.data.userId);
      // 새 템플릿 생성 시 본인 ID로만 생성 가능
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
    }
  }
}
